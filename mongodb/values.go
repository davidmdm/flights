// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package mongodb

type Values struct {
	// MongoDB(&reg;) Affinity for pod assignment
	Affinity ValuesAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Additional labels to be added to the MongoDB(&reg;) statefulset. Evaluated as a
	// template
	Annotations ValuesAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Arbiter corresponds to the JSON schema field "arbiter".
	Arbiter *ValuesArbiter `json:"arbiter,omitempty" yaml:"arbiter,omitempty" mapstructure:"arbiter,omitempty"`

	// MongoDB(&reg;) architecture (`standalone` or `replicaset`)
	Architecture string `json:"architecture,omitempty" yaml:"architecture,omitempty" mapstructure:"architecture,omitempty"`

	// Override default container args (useful when using custom images)
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Auth corresponds to the JSON schema field "auth".
	Auth *ValuesAuth `json:"auth,omitempty" yaml:"auth,omitempty" mapstructure:"auth,omitempty"`

	// Mount Service Account token in pod
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Backup corresponds to the JSON schema field "backup".
	Backup *ValuesBackup `json:"backup,omitempty" yaml:"backup,omitempty" mapstructure:"backup,omitempty"`

	// Default Kubernetes cluster domain
	ClusterDomain string `json:"clusterDomain,omitempty" yaml:"clusterDomain,omitempty" mapstructure:"clusterDomain,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Common annotations to add to all Mongo resources (sub-charts are not
	// considered). Evaluated as a template
	CommonAnnotations ValuesCommonAnnotations `json:"commonAnnotations,omitempty" yaml:"commonAnnotations,omitempty" mapstructure:"commonAnnotations,omitempty"`

	// Add labels to all the deployed resources (sub-charts are not considered).
	// Evaluated as a template
	CommonLabels ValuesCommonLabels `json:"commonLabels,omitempty" yaml:"commonLabels,omitempty" mapstructure:"commonLabels,omitempty"`

	// MongoDB(&reg;) configuration file to be used for Primary and Secondary nodes
	Configuration string `json:"configuration,omitempty" yaml:"configuration,omitempty" mapstructure:"configuration,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Override default liveness probe for MongoDB(&reg;) containers
	CustomLivenessProbe ValuesCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Override default readiness probe for MongoDB(&reg;) containers
	CustomReadinessProbe ValuesCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Override default startup probe for MongoDB(&reg;) containers
	CustomStartupProbe ValuesCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// DiagnosticMode corresponds to the JSON schema field "diagnosticMode".
	DiagnosticMode *ValuesDiagnosticMode `json:"diagnosticMode,omitempty" yaml:"diagnosticMode,omitempty" mapstructure:"diagnosticMode,omitempty"`

	// Switch to enable/disable DirectoryPerDB on MongoDB(&reg;)
	DirectoryPerDB bool `json:"directoryPerDB,omitempty" yaml:"directoryPerDB,omitempty" mapstructure:"directoryPerDB,omitempty"`

	// Switch to enable/disable MongoDB(&reg;) server-side JavaScript execution
	DisableJavascript bool `json:"disableJavascript,omitempty" yaml:"disableJavascript,omitempty" mapstructure:"disableJavascript,omitempty"`

	// Switch to enable/disable MongoDB(&reg;) system log
	DisableSystemLog bool `json:"disableSystemLog,omitempty" yaml:"disableSystemLog,omitempty" mapstructure:"disableSystemLog,omitempty"`

	// Switch to enable/disable IPv6 on MongoDB(&reg;)
	EnableIPv6 bool `json:"enableIPv6,omitempty" yaml:"enableIPv6,omitempty" mapstructure:"enableIPv6,omitempty"`

	// Switch to enable/disable MongoDB(&reg;) Journaling
	EnableJournal bool `json:"enableJournal,omitempty" yaml:"enableJournal,omitempty" mapstructure:"enableJournal,omitempty"`

	// Whether information about services should be injected into pod's environment
	// variable
	EnableServiceLinks bool `json:"enableServiceLinks,omitempty" yaml:"enableServiceLinks,omitempty" mapstructure:"enableServiceLinks,omitempty"`

	// Name of existing ConfigMap with MongoDB(&reg;) configuration for Primary and
	// Secondary nodes
	ExistingConfigmap string `json:"existingConfigmap,omitempty" yaml:"existingConfigmap,omitempty" mapstructure:"existingConfigmap,omitempty"`

	// ExternalAccess corresponds to the JSON schema field "externalAccess".
	ExternalAccess *ValuesExternalAccess `json:"externalAccess,omitempty" yaml:"externalAccess,omitempty" mapstructure:"externalAccess,omitempty"`

	// Array of extra objects to deploy with the release
	ExtraDeploy []interface{} `json:"extraDeploy,omitempty" yaml:"extraDeploy,omitempty" mapstructure:"extraDeploy,omitempty"`

	// Extra environment variables to add to MongoDB(&reg;) pods
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars (in case of sensitive data)
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// MongoDB(&reg;) additional command line flags
	ExtraFlags []interface{} `json:"extraFlags,omitempty" yaml:"extraFlags,omitempty" mapstructure:"extraFlags,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the MongoDB(&reg;)
	// container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes to the MongoDB(&reg;)
	// statefulset
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// String to fully override mongodb.fullname template
	FullnameOverride string `json:"fullnameOverride,omitempty" yaml:"fullnameOverride,omitempty" mapstructure:"fullnameOverride,omitempty"`

	// Global corresponds to the JSON schema field "global".
	Global *ValuesGlobal `json:"global,omitempty" yaml:"global,omitempty" mapstructure:"global,omitempty"`

	// Hidden corresponds to the JSON schema field "hidden".
	Hidden *ValuesHidden `json:"hidden,omitempty" yaml:"hidden,omitempty" mapstructure:"hidden,omitempty"`

	// Add deployment host aliases
	HostAliases []interface{} `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Add additional init containers for the hidden node pod(s)
	InitContainers []interface{} `json:"initContainers,omitempty" yaml:"initContainers,omitempty" mapstructure:"initContainers,omitempty"`

	// Dictionary of initdb scripts
	InitdbScripts ValuesInitdbScripts `json:"initdbScripts,omitempty" yaml:"initdbScripts,omitempty" mapstructure:"initdbScripts,omitempty"`

	// Existing ConfigMap with custom initdb scripts
	InitdbScriptsConfigMap string `json:"initdbScriptsConfigMap,omitempty" yaml:"initdbScriptsConfigMap,omitempty" mapstructure:"initdbScriptsConfigMap,omitempty"`

	// Force target Kubernetes version (using Helm capabilities if not set)
	KubeVersion string `json:"kubeVersion,omitempty" yaml:"kubeVersion,omitempty" mapstructure:"kubeVersion,omitempty"`

	// Annotations to be added to the MongoDB(&reg;) statefulset. Evaluated as a
	// template
	Labels ValuesLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// LifecycleHook for the MongoDB(&reg;) container(s) to automate configuration
	// before or after startup
	LifecycleHooks ValuesLifecycleHooks `json:"lifecycleHooks,omitempty" yaml:"lifecycleHooks,omitempty" mapstructure:"lifecycleHooks,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// String to partially override mongodb.fullname template (will maintain the
	// release name)
	NameOverride string `json:"nameOverride,omitempty" yaml:"nameOverride,omitempty" mapstructure:"nameOverride,omitempty"`

	// String to fully override common.names.namespace
	NamespaceOverride string `json:"namespaceOverride,omitempty" yaml:"namespaceOverride,omitempty" mapstructure:"namespaceOverride,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// MongoDB(&reg;) Node labels for pod assignment
	NodeSelector ValuesNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pdb corresponds to the JSON schema field "pdb".
	Pdb *ValuesPdb `json:"pdb,omitempty" yaml:"pdb,omitempty" mapstructure:"pdb,omitempty"`

	// Persistence corresponds to the JSON schema field "persistence".
	Persistence *ValuesPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty" mapstructure:"persistence,omitempty"`

	// PersistentVolumeClaimRetentionPolicy corresponds to the JSON schema field
	// "persistentVolumeClaimRetentionPolicy".
	PersistentVolumeClaimRetentionPolicy *ValuesPersistentVolumeClaimRetentionPolicy `json:"persistentVolumeClaimRetentionPolicy,omitempty" yaml:"persistentVolumeClaimRetentionPolicy,omitempty" mapstructure:"persistentVolumeClaimRetentionPolicy,omitempty"`

	// MongoDB(&reg;) Pod affinity preset. Ignored if `affinity` is set. Allowed
	// values: `soft` or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// MongoDB(&reg;) Pod annotations
	PodAnnotations ValuesPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// MongoDB(&reg;) Pod anti-affinity preset. Ignored if `affinity` is set. Allowed
	// values: `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// MongoDB(&reg;) pod labels
	PodLabels ValuesPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// Pod management policy for MongoDB(&reg;)
	PodManagementPolicy string `json:"podManagementPolicy,omitempty" yaml:"podManagementPolicy,omitempty" mapstructure:"podManagementPolicy,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// PodSecurityPolicy corresponds to the JSON schema field "podSecurityPolicy".
	PodSecurityPolicy *ValuesPodSecurityPolicy `json:"podSecurityPolicy,omitempty" yaml:"podSecurityPolicy,omitempty" mapstructure:"podSecurityPolicy,omitempty"`

	// Name of the existing priority class to be used by MongoDB(&reg;) pod(s)
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// Rbac corresponds to the JSON schema field "rbac".
	Rbac *ValuesRbac `json:"rbac,omitempty" yaml:"rbac,omitempty" mapstructure:"rbac,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Number of MongoDB(&reg;) nodes
	ReplicaCount float64 `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// ReplicaSetConfigurationSettings corresponds to the JSON schema field
	// "replicaSetConfigurationSettings".
	ReplicaSetConfigurationSettings *ValuesReplicaSetConfigurationSettings `json:"replicaSetConfigurationSettings,omitempty" yaml:"replicaSetConfigurationSettings,omitempty" mapstructure:"replicaSetConfigurationSettings,omitempty"`

	// Enable DNS hostnames in the replicaset config (only when
	// `architecture=replicaset`)
	ReplicaSetHostnames bool `json:"replicaSetHostnames,omitempty" yaml:"replicaSetHostnames,omitempty" mapstructure:"replicaSetHostnames,omitempty"`

	// Name of the replica set (only when `architecture=replicaset`)
	ReplicaSetName string `json:"replicaSetName,omitempty" yaml:"replicaSetName,omitempty" mapstructure:"replicaSetName,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if resources is
	// set (resources is recommended for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Name of the runtime class to be used by MongoDB(&reg;) pod(s)
	RuntimeClassName string `json:"runtimeClassName,omitempty" yaml:"runtimeClassName,omitempty" mapstructure:"runtimeClassName,omitempty"`

	// Name of the scheduler (other than default) to dispatch pods
	SchedulerName string `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty" mapstructure:"schedulerName,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// ServiceBindings corresponds to the JSON schema field "serviceBindings".
	ServiceBindings *ValuesServiceBindings `json:"serviceBindings,omitempty" yaml:"serviceBindings,omitempty" mapstructure:"serviceBindings,omitempty"`

	// Add additional sidecar containers for the MongoDB(&reg;) pod(s)
	Sidecars []interface{} `json:"sidecars,omitempty" yaml:"sidecars,omitempty" mapstructure:"sidecars,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// MongoDB(&reg;) system log verbosity level
	SystemLogVerbosity float64 `json:"systemLogVerbosity,omitempty" yaml:"systemLogVerbosity,omitempty" mapstructure:"systemLogVerbosity,omitempty"`

	// MongoDB(&reg;) Termination Grace Period
	TerminationGracePeriodSeconds string `json:"terminationGracePeriodSeconds,omitempty" yaml:"terminationGracePeriodSeconds,omitempty" mapstructure:"terminationGracePeriodSeconds,omitempty"`

	// Tls corresponds to the JSON schema field "tls".
	Tls *ValuesTls `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`

	// MongoDB(&reg;) Tolerations for pod assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// Override common lib default topology key. If empty - "kubernetes.io/hostname"
	// is used
	TopologyKey string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`

	// MongoDB(&reg;) Spread Constraints for Pods
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// UpdateStrategy corresponds to the JSON schema field "updateStrategy".
	UpdateStrategy *ValuesUpdateStrategy `json:"updateStrategy,omitempty" yaml:"updateStrategy,omitempty" mapstructure:"updateStrategy,omitempty"`

	// Set to true to use a StatefulSet instead of a Deployment (only when
	// `architecture=standalone`)
	UseStatefulSet bool `json:"useStatefulSet,omitempty" yaml:"useStatefulSet,omitempty" mapstructure:"useStatefulSet,omitempty"`

	// VolumePermissions corresponds to the JSON schema field "volumePermissions".
	VolumePermissions *ValuesVolumePermissions `json:"volumePermissions,omitempty" yaml:"volumePermissions,omitempty" mapstructure:"volumePermissions,omitempty"`
}

// MongoDB(&reg;) Affinity for pod assignment
type ValuesAffinity map[string]interface{}

// Additional labels to be added to the MongoDB(&reg;) statefulset. Evaluated as a
// template
type ValuesAnnotations map[string]interface{}

type ValuesArbiter struct {
	// Arbiter Affinity for pod assignment
	Affinity ValuesArbiterAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Additional labels to be added to the Arbiter statefulset
	Annotations ValuesArbiterAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Override default container args (useful when using custom images)
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Mount Service Account token in pod
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Arbiter configuration file to be used
	Configuration string `json:"configuration,omitempty" yaml:"configuration,omitempty" mapstructure:"configuration,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesArbiterContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesArbiterContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Override default liveness probe for Arbiter containers
	CustomLivenessProbe ValuesArbiterCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Override default readiness probe for Arbiter containers
	CustomReadinessProbe ValuesArbiterCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Override default startup probe for Arbiter containers
	CustomStartupProbe ValuesArbiterCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// Enable deploying the arbiter
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Name of existing ConfigMap with Arbiter configuration
	ExistingConfigmap string `json:"existingConfigmap,omitempty" yaml:"existingConfigmap,omitempty" mapstructure:"existingConfigmap,omitempty"`

	// Extra environment variables to add to Arbiter pods
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars (in case of sensitive data)
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// Arbiter additional command line flags
	ExtraFlags []interface{} `json:"extraFlags,omitempty" yaml:"extraFlags,omitempty" mapstructure:"extraFlags,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the Arbiter
	// container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes to the Arbiter statefulset
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// Add deployment host aliases
	HostAliases []interface{} `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// Add additional init containers for the Arbiter pod(s)
	InitContainers []interface{} `json:"initContainers,omitempty" yaml:"initContainers,omitempty" mapstructure:"initContainers,omitempty"`

	// Annotations to be added to the Arbiter statefulset
	Labels ValuesArbiterLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// LifecycleHook for the Arbiter container to automate configuration before or
	// after startup
	LifecycleHooks ValuesArbiterLifecycleHooks `json:"lifecycleHooks,omitempty" yaml:"lifecycleHooks,omitempty" mapstructure:"lifecycleHooks,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesArbiterLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesArbiterNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// Arbiter Node labels for pod assignment
	NodeSelector ValuesArbiterNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pdb corresponds to the JSON schema field "pdb".
	Pdb *ValuesArbiterPdb `json:"pdb,omitempty" yaml:"pdb,omitempty" mapstructure:"pdb,omitempty"`

	// Arbiter Pod affinity preset. Ignored if `affinity` is set. Allowed values:
	// `soft` or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// Arbiter Pod annotations
	PodAnnotations ValuesArbiterPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// Arbiter Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values:
	// `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// Arbiter pod labels
	PodLabels ValuesArbiterPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// Pod management policy for MongoDB(&reg;)
	PodManagementPolicy string `json:"podManagementPolicy,omitempty" yaml:"podManagementPolicy,omitempty" mapstructure:"podManagementPolicy,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesArbiterPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Name of the existing priority class to be used by Arbiter pod(s)
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesArbiterReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesArbiterResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// arbiter.resources is set (arbiter.resources is recommended for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Name of the runtime class to be used by Arbiter pod(s)
	RuntimeClassName string `json:"runtimeClassName,omitempty" yaml:"runtimeClassName,omitempty" mapstructure:"runtimeClassName,omitempty"`

	// Name of the scheduler (other than default) to dispatch pods
	SchedulerName string `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty" mapstructure:"schedulerName,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesArbiterService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// Add additional sidecar containers for the Arbiter pod(s)
	Sidecars []interface{} `json:"sidecars,omitempty" yaml:"sidecars,omitempty" mapstructure:"sidecars,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesArbiterStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// Arbiter Termination Grace Period
	TerminationGracePeriodSeconds string `json:"terminationGracePeriodSeconds,omitempty" yaml:"terminationGracePeriodSeconds,omitempty" mapstructure:"terminationGracePeriodSeconds,omitempty"`

	// Arbiter Tolerations for pod assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// MongoDB(&reg;) Spread Constraints for arbiter Pods
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// UpdateStrategy corresponds to the JSON schema field "updateStrategy".
	UpdateStrategy *ValuesArbiterUpdateStrategy `json:"updateStrategy,omitempty" yaml:"updateStrategy,omitempty" mapstructure:"updateStrategy,omitempty"`
}

// Arbiter Affinity for pod assignment
type ValuesArbiterAffinity map[string]interface{}

// Additional labels to be added to the Arbiter statefulset
type ValuesArbiterAnnotations map[string]interface{}

type ValuesArbiterContainerPorts struct {
	// MongoDB(&reg;) arbiter container port
	Mongodb float64 `json:"mongodb,omitempty" yaml:"mongodb,omitempty" mapstructure:"mongodb,omitempty"`
}

type ValuesArbiterContainerSecurityContext struct {
	// Set container's Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesArbiterContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set container's Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set container's Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesArbiterContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesArbiterContainerSecurityContextCapabilities struct {
	// List of capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesArbiterContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Override default liveness probe for Arbiter containers
type ValuesArbiterCustomLivenessProbe map[string]interface{}

// Override default readiness probe for Arbiter containers
type ValuesArbiterCustomReadinessProbe map[string]interface{}

// Override default startup probe for Arbiter containers
type ValuesArbiterCustomStartupProbe map[string]interface{}

// Annotations to be added to the Arbiter statefulset
type ValuesArbiterLabels map[string]interface{}

// LifecycleHook for the Arbiter container to automate configuration before or
// after startup
type ValuesArbiterLifecycleHooks map[string]interface{}

type ValuesArbiterLivenessProbe struct {
	// Enable livenessProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesArbiterNodeAffinityPreset struct {
	// Arbiter Node label key to match Ignored if `affinity` is set.
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Arbiter Node affinity preset type. Ignored if `affinity` is set. Allowed
	// values: `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Arbiter Node label values to match. Ignored if `affinity` is set.
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// Arbiter Node labels for pod assignment
type ValuesArbiterNodeSelector map[string]interface{}

type ValuesArbiterPdb struct {
	// Enable/disable a Pod Disruption Budget creation for Arbiter pod(s)
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Maximum number/percentage of Arbiter pods that may be made unavailable
	MaxUnavailable string `json:"maxUnavailable,omitempty" yaml:"maxUnavailable,omitempty" mapstructure:"maxUnavailable,omitempty"`

	// Minimum number/percentage of Arbiter pods that should remain scheduled
	MinAvailable float64 `json:"minAvailable,omitempty" yaml:"minAvailable,omitempty" mapstructure:"minAvailable,omitempty"`
}

// Arbiter Pod annotations
type ValuesArbiterPodAnnotations map[string]interface{}

// Arbiter pod labels
type ValuesArbiterPodLabels map[string]interface{}

type ValuesArbiterPodSecurityContext struct {
	// Enable Arbiter pod(s)' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Group ID for the volumes of the Arbiter pod(s)
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// sysctl settings of the Arbiter pod(s)'
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesArbiterReadinessProbe struct {
	// Enable readinessProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesArbiterResources map[string]interface{}

type ValuesArbiterService struct {
	// Provide any additional annotations that may be required
	Annotations ValuesArbiterServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Headless corresponds to the JSON schema field "headless".
	Headless *ValuesArbiterServiceHeadless `json:"headless,omitempty" yaml:"headless,omitempty" mapstructure:"headless,omitempty"`

	// The arbiter service name
	NameOverride string `json:"nameOverride,omitempty" yaml:"nameOverride,omitempty" mapstructure:"nameOverride,omitempty"`

	// Ports corresponds to the JSON schema field "ports".
	Ports *ValuesArbiterServicePorts `json:"ports,omitempty" yaml:"ports,omitempty" mapstructure:"ports,omitempty"`
}

// Provide any additional annotations that may be required
type ValuesArbiterServiceAnnotations map[string]interface{}

type ValuesArbiterServiceHeadless struct {
	// Annotations for the headless service.
	Annotations ValuesArbiterServiceHeadlessAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`
}

// Annotations for the headless service.
type ValuesArbiterServiceHeadlessAnnotations map[string]interface{}

type ValuesArbiterServicePorts struct {
	// MongoDB(&reg;) service port
	Mongodb float64 `json:"mongodb,omitempty" yaml:"mongodb,omitempty" mapstructure:"mongodb,omitempty"`
}

type ValuesArbiterStartupProbe struct {
	// Enable startupProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesArbiterUpdateStrategy struct {
	// Strategy that will be employed to update Pods in the StatefulSet
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesAuth struct {
	// DEPRECATED: use `auth.databases` instead
	Database string `json:"database,omitempty" yaml:"database,omitempty" mapstructure:"database,omitempty"`

	// List of custom databases to be created during the initialization
	Databases []interface{} `json:"databases,omitempty" yaml:"databases,omitempty" mapstructure:"databases,omitempty"`

	// Enable authentication
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Existing secret with MongoDB(&reg;) credentials (keys: `mongodb-passwords`,
	// `mongodb-root-password`, `mongodb-metrics-password`, `mongodb-replica-set-key`)
	ExistingSecret string `json:"existingSecret,omitempty" yaml:"existingSecret,omitempty" mapstructure:"existingSecret,omitempty"`

	// DEPRECATED: use `auth.passwords` instead
	Password string `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// List of passwords for the custom users set at `auth.usernames`
	Passwords []interface{} `json:"passwords,omitempty" yaml:"passwords,omitempty" mapstructure:"passwords,omitempty"`

	// Key used for authentication in the replicaset (only when
	// `architecture=replicaset`)
	ReplicaSetKey string `json:"replicaSetKey,omitempty" yaml:"replicaSetKey,omitempty" mapstructure:"replicaSetKey,omitempty"`

	// MongoDB(&reg;) root password
	RootPassword string `json:"rootPassword,omitempty" yaml:"rootPassword,omitempty" mapstructure:"rootPassword,omitempty"`

	// MongoDB(&reg;) root user
	RootUser string `json:"rootUser,omitempty" yaml:"rootUser,omitempty" mapstructure:"rootUser,omitempty"`

	// DEPRECATED: use `auth.usernames` instead
	Username string `json:"username,omitempty" yaml:"username,omitempty" mapstructure:"username,omitempty"`

	// List of custom users to be created during the initialization
	Usernames []interface{} `json:"usernames,omitempty" yaml:"usernames,omitempty" mapstructure:"usernames,omitempty"`
}

type ValuesBackup struct {
	// Cronjob corresponds to the JSON schema field "cronjob".
	Cronjob *ValuesBackupCronjob `json:"cronjob,omitempty" yaml:"cronjob,omitempty" mapstructure:"cronjob,omitempty"`

	// Enable the logical dump of the database "regularly"
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesBackupCronjob struct {
	// Set the cronjob annotations
	Annotations ValuesBackupCronjobAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Set the cronjob parameter backoffLimit
	BackoffLimit float64 `json:"backoffLimit,omitempty" yaml:"backoffLimit,omitempty" mapstructure:"backoffLimit,omitempty"`

	// Set backup container's command to run
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Set the cronjob parameter concurrencyPolicy
	ConcurrencyPolicy string `json:"concurrencyPolicy,omitempty" yaml:"concurrencyPolicy,omitempty" mapstructure:"concurrencyPolicy,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesBackupCronjobContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Set the cronjob parameter failedJobsHistoryLimit
	FailedJobsHistoryLimit float64 `json:"failedJobsHistoryLimit,omitempty" yaml:"failedJobsHistoryLimit,omitempty" mapstructure:"failedJobsHistoryLimit,omitempty"`

	// Set the cronjob labels
	Labels ValuesBackupCronjobLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// Set the cronjob parameter restartPolicy
	RestartPolicy string `json:"restartPolicy,omitempty" yaml:"restartPolicy,omitempty" mapstructure:"restartPolicy,omitempty"`

	// Set the cronjob parameter schedule
	Schedule string `json:"schedule,omitempty" yaml:"schedule,omitempty" mapstructure:"schedule,omitempty"`

	// Set the cronjob parameter startingDeadlineSeconds
	StartingDeadlineSeconds string `json:"startingDeadlineSeconds,omitempty" yaml:"startingDeadlineSeconds,omitempty" mapstructure:"startingDeadlineSeconds,omitempty"`

	// Storage corresponds to the JSON schema field "storage".
	Storage *ValuesBackupCronjobStorage `json:"storage,omitempty" yaml:"storage,omitempty" mapstructure:"storage,omitempty"`

	// Set the cronjob parameter successfulJobsHistoryLimit
	SuccessfulJobsHistoryLimit float64 `json:"successfulJobsHistoryLimit,omitempty" yaml:"successfulJobsHistoryLimit,omitempty" mapstructure:"successfulJobsHistoryLimit,omitempty"`

	// Set the cronjob parameter ttlSecondsAfterFinished
	TtlSecondsAfterFinished string `json:"ttlSecondsAfterFinished,omitempty" yaml:"ttlSecondsAfterFinished,omitempty" mapstructure:"ttlSecondsAfterFinished,omitempty"`
}

// Set the cronjob annotations
type ValuesBackupCronjobAnnotations map[string]interface{}

type ValuesBackupCronjobContainerSecurityContext struct {
	// Set container's Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesBackupCronjobContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set container's Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set container's Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesBackupCronjobContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesBackupCronjobContainerSecurityContextCapabilities struct {
	// List of capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesBackupCronjobContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Set the cronjob labels
type ValuesBackupCronjobLabels map[string]interface{}

type ValuesBackupCronjobStorage struct {
	// PV Access Mode
	AccessModes []string `json:"accessModes,omitempty" yaml:"accessModes,omitempty" mapstructure:"accessModes,omitempty"`

	// PVC annotations
	Annotations ValuesBackupCronjobStorageAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Provide an existing `PersistentVolumeClaim` (only when
	// `architecture=standalone`)
	ExistingClaim string `json:"existingClaim,omitempty" yaml:"existingClaim,omitempty" mapstructure:"existingClaim,omitempty"`

	// Path to mount the volume at
	MountPath string `json:"mountPath,omitempty" yaml:"mountPath,omitempty" mapstructure:"mountPath,omitempty"`

	// Setting it to "keep" to avoid removing PVCs during a helm delete operation.
	// Leaving it empty will delete PVCs after the chart deleted
	ResourcePolicy string `json:"resourcePolicy,omitempty" yaml:"resourcePolicy,omitempty" mapstructure:"resourcePolicy,omitempty"`

	// PVC Storage Request for the backup data volume
	Size string `json:"size,omitempty" yaml:"size,omitempty" mapstructure:"size,omitempty"`

	// PVC Storage Class for the backup data volume
	StorageClass string `json:"storageClass,omitempty" yaml:"storageClass,omitempty" mapstructure:"storageClass,omitempty"`

	// Subdirectory of the volume to mount at
	SubPath string `json:"subPath,omitempty" yaml:"subPath,omitempty" mapstructure:"subPath,omitempty"`

	// VolumeClaimTemplates corresponds to the JSON schema field
	// "volumeClaimTemplates".
	VolumeClaimTemplates *ValuesBackupCronjobStorageVolumeClaimTemplates `json:"volumeClaimTemplates,omitempty" yaml:"volumeClaimTemplates,omitempty" mapstructure:"volumeClaimTemplates,omitempty"`
}

// PVC annotations
type ValuesBackupCronjobStorageAnnotations map[string]interface{}

type ValuesBackupCronjobStorageVolumeClaimTemplates struct {
	// A label query over volumes to consider for binding (e.g. when using local
	// volumes)
	Selector ValuesBackupCronjobStorageVolumeClaimTemplatesSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// A label query over volumes to consider for binding (e.g. when using local
// volumes)
type ValuesBackupCronjobStorageVolumeClaimTemplatesSelector map[string]interface{}

// Common annotations to add to all Mongo resources (sub-charts are not
// considered). Evaluated as a template
type ValuesCommonAnnotations map[string]interface{}

// Add labels to all the deployed resources (sub-charts are not considered).
// Evaluated as a template
type ValuesCommonLabels map[string]interface{}

type ValuesContainerPorts struct {
	// MongoDB(&reg;) container port
	Mongodb float64 `json:"mongodb,omitempty" yaml:"mongodb,omitempty" mapstructure:"mongodb,omitempty"`
}

type ValuesContainerSecurityContext struct {
	// Set container's Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set container's Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set container's Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesContainerSecurityContextCapabilities struct {
	// List of capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Override default liveness probe for MongoDB(&reg;) containers
type ValuesCustomLivenessProbe map[string]interface{}

// Override default readiness probe for MongoDB(&reg;) containers
type ValuesCustomReadinessProbe map[string]interface{}

// Override default startup probe for MongoDB(&reg;) containers
type ValuesCustomStartupProbe map[string]interface{}

type ValuesDiagnosticMode struct {
	// Args to override all containers in the deployment
	Args []string `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Command to override all containers in the deployment
	Command []string `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Enable diagnostic mode (all probes will be disabled and the command will be
	// overridden)
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesExternalAccess struct {
	// AutoDiscovery corresponds to the JSON schema field "autoDiscovery".
	AutoDiscovery *ValuesExternalAccessAutoDiscovery `json:"autoDiscovery,omitempty" yaml:"autoDiscovery,omitempty" mapstructure:"autoDiscovery,omitempty"`

	// Enable Kubernetes external cluster access to MongoDB(&reg;) nodes (only for
	// replicaset architecture)
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ExternalMaster corresponds to the JSON schema field "externalMaster".
	ExternalMaster *ValuesExternalAccessExternalMaster `json:"externalMaster,omitempty" yaml:"externalMaster,omitempty" mapstructure:"externalMaster,omitempty"`

	// Hidden corresponds to the JSON schema field "hidden".
	Hidden *ValuesExternalAccessHidden `json:"hidden,omitempty" yaml:"hidden,omitempty" mapstructure:"hidden,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesExternalAccessService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`
}

type ValuesExternalAccessAutoDiscovery struct {
	// Enable using an init container to auto-detect external IPs by querying the K8s
	// API
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesExternalAccessAutoDiscoveryImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesExternalAccessAutoDiscoveryResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// externalAccess.autoDiscovery.resources is set
	// (externalAccess.autoDiscovery.resources is recommended for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`
}

type ValuesExternalAccessAutoDiscoveryImage struct {
	// Init container auto-discovery image digest in the way sha256:aa.... Please note
	// this parameter, if set, will override the tag
	Digest string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// Init container auto-discovery image pull policy
	PullPolicy string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Init container auto-discovery image pull secrets
	PullSecrets []interface{} `json:"pullSecrets,omitempty" yaml:"pullSecrets,omitempty" mapstructure:"pullSecrets,omitempty"`

	// Init container auto-discovery image registry
	Registry string `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// Init container auto-discovery image repository
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesExternalAccessAutoDiscoveryResources map[string]interface{}

type ValuesExternalAccessExternalMaster struct {
	// Use external master for bootstrapping
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// External master host to bootstrap from
	Host string `json:"host,omitempty" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// Port for MongoDB(&reg;) service external master host
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesExternalAccessHidden struct {
	// Enable Kubernetes external cluster access to MongoDB(&reg;) hidden nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesExternalAccessHiddenService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`
}

type ValuesExternalAccessHiddenService struct {
	// Wheter to allocate node ports when service type is LoadBalancer
	AllocateLoadBalancerNodePorts bool `json:"allocateLoadBalancerNodePorts,omitempty" yaml:"allocateLoadBalancerNodePorts,omitempty" mapstructure:"allocateLoadBalancerNodePorts,omitempty"`

	// Service annotations for external access
	Annotations ValuesExternalAccessHiddenServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Domain or external IP used to configure MongoDB(&reg;) advertised hostname when
	// service type is NodePort
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty" mapstructure:"domain,omitempty"`

	// MongoDB(&reg;) service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// loadBalancerClass when service type is LoadBalancer
	LoadBalancerClass string `json:"loadBalancerClass,omitempty" yaml:"loadBalancerClass,omitempty" mapstructure:"loadBalancerClass,omitempty"`

	// Array of load balancer IPs for MongoDB(&reg;) nodes
	LoadBalancerIPs []interface{} `json:"loadBalancerIPs,omitempty" yaml:"loadBalancerIPs,omitempty" mapstructure:"loadBalancerIPs,omitempty"`

	// Address(es) that are allowed when service is LoadBalancer
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Array of node ports used to configure MongoDB(&reg;) advertised hostname when
	// service type is NodePort. Length must be the same as replicaCount
	NodePorts []interface{} `json:"nodePorts,omitempty" yaml:"nodePorts,omitempty" mapstructure:"nodePorts,omitempty"`

	// MongoDB(&reg;) port name used for external access when service type is
	// LoadBalancer
	PortName string `json:"portName,omitempty" yaml:"portName,omitempty" mapstructure:"portName,omitempty"`

	// Ports corresponds to the JSON schema field "ports".
	Ports *ValuesExternalAccessHiddenServicePorts `json:"ports,omitempty" yaml:"ports,omitempty" mapstructure:"ports,omitempty"`

	// Control where client requests go, to the same pod or round-robin
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesExternalAccessHiddenServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Kubernetes Service type for external access. Allowed values: NodePort or
	// LoadBalancer
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Service annotations for external access
type ValuesExternalAccessHiddenServiceAnnotations map[string]interface{}

type ValuesExternalAccessHiddenServicePorts struct {
	// MongoDB(&reg;) port used for external access when service type is LoadBalancer
	Mongodb float64 `json:"mongodb,omitempty" yaml:"mongodb,omitempty" mapstructure:"mongodb,omitempty"`
}

// Additional settings for the sessionAffinity
type ValuesExternalAccessHiddenServiceSessionAffinityConfig map[string]interface{}

type ValuesExternalAccessService struct {
	// Wheter to allocate node ports when service type is LoadBalancer
	AllocateLoadBalancerNodePorts bool `json:"allocateLoadBalancerNodePorts,omitempty" yaml:"allocateLoadBalancerNodePorts,omitempty" mapstructure:"allocateLoadBalancerNodePorts,omitempty"`

	// Service annotations for external access
	Annotations ValuesExternalAccessServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Domain or external IP used to configure MongoDB(&reg;) advertised hostname when
	// service type is NodePort
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty" mapstructure:"domain,omitempty"`

	// MongoDB(&reg;) service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// loadBalancerClass when service type is LoadBalancer
	LoadBalancerClass string `json:"loadBalancerClass,omitempty" yaml:"loadBalancerClass,omitempty" mapstructure:"loadBalancerClass,omitempty"`

	// Array of load balancer IPs for MongoDB(&reg;) nodes
	LoadBalancerIPs []interface{} `json:"loadBalancerIPs,omitempty" yaml:"loadBalancerIPs,omitempty" mapstructure:"loadBalancerIPs,omitempty"`

	// Address(es) that are allowed when service is LoadBalancer
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Array of node ports used to configure MongoDB(&reg;) advertised hostname when
	// service type is NodePort
	NodePorts []interface{} `json:"nodePorts,omitempty" yaml:"nodePorts,omitempty" mapstructure:"nodePorts,omitempty"`

	// MongoDB(&reg;) port name used for external access when service type is
	// LoadBalancer
	PortName string `json:"portName,omitempty" yaml:"portName,omitempty" mapstructure:"portName,omitempty"`

	// Ports corresponds to the JSON schema field "ports".
	Ports *ValuesExternalAccessServicePorts `json:"ports,omitempty" yaml:"ports,omitempty" mapstructure:"ports,omitempty"`

	// Control where client requests go, to the same pod or round-robin
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesExternalAccessServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Kubernetes Service type for external access. Allowed values: NodePort,
	// LoadBalancer or ClusterIP
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Service annotations for external access
type ValuesExternalAccessServiceAnnotations map[string]interface{}

type ValuesExternalAccessServicePorts struct {
	// MongoDB(&reg;) port used for external access when service type is LoadBalancer
	Mongodb float64 `json:"mongodb,omitempty" yaml:"mongodb,omitempty" mapstructure:"mongodb,omitempty"`
}

// Additional settings for the sessionAffinity
type ValuesExternalAccessServiceSessionAffinityConfig map[string]interface{}

type ValuesGlobal struct {
	// Compatibility corresponds to the JSON schema field "compatibility".
	Compatibility *ValuesGlobalCompatibility `json:"compatibility,omitempty" yaml:"compatibility,omitempty" mapstructure:"compatibility,omitempty"`

	// Global Docker registry secret names as an array
	ImagePullSecrets []interface{} `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`

	// Global Docker image registry
	ImageRegistry string `json:"imageRegistry,omitempty" yaml:"imageRegistry,omitempty" mapstructure:"imageRegistry,omitempty"`

	// Override the namespace for resource deployed by the chart, but can itself be
	// overridden by the local namespaceOverride
	NamespaceOverride string `json:"namespaceOverride,omitempty" yaml:"namespaceOverride,omitempty" mapstructure:"namespaceOverride,omitempty"`

	// Global StorageClass for Persistent Volume(s)
	StorageClass string `json:"storageClass,omitempty" yaml:"storageClass,omitempty" mapstructure:"storageClass,omitempty"`
}

type ValuesGlobalCompatibility struct {
	// Openshift corresponds to the JSON schema field "openshift".
	Openshift *ValuesGlobalCompatibilityOpenshift `json:"openshift,omitempty" yaml:"openshift,omitempty" mapstructure:"openshift,omitempty"`
}

type ValuesGlobalCompatibilityOpenshift struct {
	// Adapt the securityContext sections of the deployment to make them compatible
	// with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and
	// let the platform use their allowed default IDs. Possible values: auto (apply if
	// the detected running cluster is Openshift), force (perform the adaptation
	// always), disabled (do not perform adaptation)
	AdaptSecurityContext string `json:"adaptSecurityContext,omitempty" yaml:"adaptSecurityContext,omitempty" mapstructure:"adaptSecurityContext,omitempty"`
}

type ValuesHidden struct {
	// Hidden node Affinity for pod assignment
	Affinity ValuesHiddenAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Additional labels to be added to thehidden node statefulset
	Annotations ValuesHiddenAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Override default container args (useful when using custom images)
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Mount Service Account token in pod
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Hidden node configuration file to be used
	Configuration string `json:"configuration,omitempty" yaml:"configuration,omitempty" mapstructure:"configuration,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesHiddenContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesHiddenContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Override default liveness probe for hidden node containers
	CustomLivenessProbe ValuesHiddenCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Override default readiness probe for hidden node containers
	CustomReadinessProbe ValuesHiddenCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Override default startup probe for MongoDB(&reg;) containers
	CustomStartupProbe ValuesHiddenCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// Enable deploying the hidden nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Name of existing ConfigMap with Hidden node configuration
	ExistingConfigmap string `json:"existingConfigmap,omitempty" yaml:"existingConfigmap,omitempty" mapstructure:"existingConfigmap,omitempty"`

	// Extra environment variables to add to Hidden node pods
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars (in case of sensitive data)
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// Hidden node additional command line flags
	ExtraFlags []interface{} `json:"extraFlags,omitempty" yaml:"extraFlags,omitempty" mapstructure:"extraFlags,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the hidden node
	// container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes to the hidden node
	// statefulset
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// Add deployment host aliases
	HostAliases []interface{} `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// Add init containers to the MongoDB(&reg;) Hidden pods.
	InitContainers []interface{} `json:"initContainers,omitempty" yaml:"initContainers,omitempty" mapstructure:"initContainers,omitempty"`

	// Annotations to be added to the hidden node statefulset
	Labels ValuesHiddenLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// LifecycleHook for the Hidden container to automate configuration before or
	// after startup
	LifecycleHooks ValuesHiddenLifecycleHooks `json:"lifecycleHooks,omitempty" yaml:"lifecycleHooks,omitempty" mapstructure:"lifecycleHooks,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesHiddenLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesHiddenNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// Hidden node Node labels for pod assignment
	NodeSelector ValuesHiddenNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pdb corresponds to the JSON schema field "pdb".
	Pdb *ValuesHiddenPdb `json:"pdb,omitempty" yaml:"pdb,omitempty" mapstructure:"pdb,omitempty"`

	// Persistence corresponds to the JSON schema field "persistence".
	Persistence *ValuesHiddenPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty" mapstructure:"persistence,omitempty"`

	// Hidden node Pod affinity preset. Ignored if `affinity` is set. Allowed values:
	// `soft` or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// Hidden node Pod annotations
	PodAnnotations ValuesHiddenPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// Hidden node Pod anti-affinity preset. Ignored if `affinity` is set. Allowed
	// values: `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// Hidden node pod labels
	PodLabels ValuesHiddenPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// Pod management policy for hidden node
	PodManagementPolicy string `json:"podManagementPolicy,omitempty" yaml:"podManagementPolicy,omitempty" mapstructure:"podManagementPolicy,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesHiddenPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Name of the existing priority class to be used by hidden node pod(s)
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesHiddenReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Number of hidden nodes (only when `architecture=replicaset`)
	ReplicaCount float64 `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesHiddenResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// hidden.resources is set (hidden.resources is recommended for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Name of the runtime class to be used by hidden node pod(s)
	RuntimeClassName string `json:"runtimeClassName,omitempty" yaml:"runtimeClassName,omitempty" mapstructure:"runtimeClassName,omitempty"`

	// Name of the scheduler (other than default) to dispatch pods
	SchedulerName string `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty" mapstructure:"schedulerName,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesHiddenService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// Add additional sidecar containers for the hidden node pod(s)
	Sidecars []interface{} `json:"sidecars,omitempty" yaml:"sidecars,omitempty" mapstructure:"sidecars,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesHiddenStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// Hidden Termination Grace Period
	TerminationGracePeriodSeconds string `json:"terminationGracePeriodSeconds,omitempty" yaml:"terminationGracePeriodSeconds,omitempty" mapstructure:"terminationGracePeriodSeconds,omitempty"`

	// Hidden node Tolerations for pod assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// MongoDB(&reg;) Spread Constraints for hidden Pods
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// UpdateStrategy corresponds to the JSON schema field "updateStrategy".
	UpdateStrategy *ValuesHiddenUpdateStrategy `json:"updateStrategy,omitempty" yaml:"updateStrategy,omitempty" mapstructure:"updateStrategy,omitempty"`
}

// Hidden node Affinity for pod assignment
type ValuesHiddenAffinity map[string]interface{}

// Additional labels to be added to thehidden node statefulset
type ValuesHiddenAnnotations map[string]interface{}

type ValuesHiddenContainerPorts struct {
	// MongoDB(&reg;) hidden container port
	Mongodb float64 `json:"mongodb,omitempty" yaml:"mongodb,omitempty" mapstructure:"mongodb,omitempty"`
}

type ValuesHiddenContainerSecurityContext struct {
	// Set container's Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesHiddenContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set container's Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set container's Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesHiddenContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesHiddenContainerSecurityContextCapabilities struct {
	// List of capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesHiddenContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Override default liveness probe for hidden node containers
type ValuesHiddenCustomLivenessProbe map[string]interface{}

// Override default readiness probe for hidden node containers
type ValuesHiddenCustomReadinessProbe map[string]interface{}

// Override default startup probe for MongoDB(&reg;) containers
type ValuesHiddenCustomStartupProbe map[string]interface{}

// Annotations to be added to the hidden node statefulset
type ValuesHiddenLabels map[string]interface{}

// LifecycleHook for the Hidden container to automate configuration before or after
// startup
type ValuesHiddenLifecycleHooks map[string]interface{}

type ValuesHiddenLivenessProbe struct {
	// Enable livenessProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesHiddenNodeAffinityPreset struct {
	// Hidden Node label key to match Ignored if `affinity` is set.
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Hidden Node affinity preset type. Ignored if `affinity` is set. Allowed values:
	// `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Hidden Node label values to match. Ignored if `affinity` is set.
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// Hidden node Node labels for pod assignment
type ValuesHiddenNodeSelector map[string]interface{}

type ValuesHiddenPdb struct {
	// Enable/disable a Pod Disruption Budget creation for hidden node pod(s)
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Maximum number/percentage of hidden node pods that may be made unavailable
	MaxUnavailable string `json:"maxUnavailable,omitempty" yaml:"maxUnavailable,omitempty" mapstructure:"maxUnavailable,omitempty"`

	// Minimum number/percentage of hidden node pods that should remain scheduled
	MinAvailable float64 `json:"minAvailable,omitempty" yaml:"minAvailable,omitempty" mapstructure:"minAvailable,omitempty"`
}

type ValuesHiddenPersistence struct {
	// PV Access Mode
	AccessModes []string `json:"accessModes,omitempty" yaml:"accessModes,omitempty" mapstructure:"accessModes,omitempty"`

	// PVC annotations
	Annotations ValuesHiddenPersistenceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enable hidden node data persistence using PVC
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Provide a medium for `emptyDir` volumes.
	Medium string `json:"medium,omitempty" yaml:"medium,omitempty" mapstructure:"medium,omitempty"`

	// The path the volume will be mounted at, useful when using different
	// MongoDB(&reg;) images.
	MountPath string `json:"mountPath,omitempty" yaml:"mountPath,omitempty" mapstructure:"mountPath,omitempty"`

	// PVC Storage Request for hidden node data volume
	Size string `json:"size,omitempty" yaml:"size,omitempty" mapstructure:"size,omitempty"`

	// PVC Storage Class for hidden node data volume
	StorageClass string `json:"storageClass,omitempty" yaml:"storageClass,omitempty" mapstructure:"storageClass,omitempty"`

	// The subdirectory of the volume to mount to, useful in dev environments
	SubPath string `json:"subPath,omitempty" yaml:"subPath,omitempty" mapstructure:"subPath,omitempty"`

	// VolumeClaimTemplates corresponds to the JSON schema field
	// "volumeClaimTemplates".
	VolumeClaimTemplates *ValuesHiddenPersistenceVolumeClaimTemplates `json:"volumeClaimTemplates,omitempty" yaml:"volumeClaimTemplates,omitempty" mapstructure:"volumeClaimTemplates,omitempty"`
}

// PVC annotations
type ValuesHiddenPersistenceAnnotations map[string]interface{}

type ValuesHiddenPersistenceVolumeClaimTemplates struct {
	// Set volumeClaimTemplate dataSource
	DataSource ValuesHiddenPersistenceVolumeClaimTemplatesDataSource `json:"dataSource,omitempty" yaml:"dataSource,omitempty" mapstructure:"dataSource,omitempty"`

	// Custom PVC requests attributes
	Requests ValuesHiddenPersistenceVolumeClaimTemplatesRequests `json:"requests,omitempty" yaml:"requests,omitempty" mapstructure:"requests,omitempty"`

	// A label query over volumes to consider for binding (e.g. when using local
	// volumes)
	Selector ValuesHiddenPersistenceVolumeClaimTemplatesSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// Set volumeClaimTemplate dataSource
type ValuesHiddenPersistenceVolumeClaimTemplatesDataSource map[string]interface{}

// Custom PVC requests attributes
type ValuesHiddenPersistenceVolumeClaimTemplatesRequests map[string]interface{}

// A label query over volumes to consider for binding (e.g. when using local
// volumes)
type ValuesHiddenPersistenceVolumeClaimTemplatesSelector map[string]interface{}

// Hidden node Pod annotations
type ValuesHiddenPodAnnotations map[string]interface{}

// Hidden node pod labels
type ValuesHiddenPodLabels map[string]interface{}

type ValuesHiddenPodSecurityContext struct {
	// Enable Hidden pod(s)' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Group ID for the volumes of the Hidden pod(s)
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// sysctl settings of the Hidden pod(s)'
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesHiddenReadinessProbe struct {
	// Enable readinessProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesHiddenResources map[string]interface{}

type ValuesHiddenService struct {
	// Provide any additional annotations that may be required
	Annotations ValuesHiddenServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Headless corresponds to the JSON schema field "headless".
	Headless *ValuesHiddenServiceHeadless `json:"headless,omitempty" yaml:"headless,omitempty" mapstructure:"headless,omitempty"`

	// MongoDB(&reg;) service port name
	PortName string `json:"portName,omitempty" yaml:"portName,omitempty" mapstructure:"portName,omitempty"`

	// Ports corresponds to the JSON schema field "ports".
	Ports *ValuesHiddenServicePorts `json:"ports,omitempty" yaml:"ports,omitempty" mapstructure:"ports,omitempty"`
}

// Provide any additional annotations that may be required
type ValuesHiddenServiceAnnotations map[string]interface{}

type ValuesHiddenServiceHeadless struct {
	// Annotations for the headless service.
	Annotations ValuesHiddenServiceHeadlessAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`
}

// Annotations for the headless service.
type ValuesHiddenServiceHeadlessAnnotations map[string]interface{}

type ValuesHiddenServicePorts struct {
	// MongoDB(&reg;) service port
	Mongodb float64 `json:"mongodb,omitempty" yaml:"mongodb,omitempty" mapstructure:"mongodb,omitempty"`
}

type ValuesHiddenStartupProbe struct {
	// Enable startupProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesHiddenUpdateStrategy struct {
	// Strategy that will be employed to update Pods in the StatefulSet
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesImage struct {
	// Set to true if you would like to see extra information on logs
	Debug bool `json:"debug,omitempty" yaml:"debug,omitempty" mapstructure:"debug,omitempty"`

	// MongoDB(&reg;) image digest in the way sha256:aa.... Please note this
	// parameter, if set, will override the tag
	Digest string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// MongoDB(&reg;) image pull policy
	PullPolicy string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Specify docker-registry secret names as an array
	PullSecrets []interface{} `json:"pullSecrets,omitempty" yaml:"pullSecrets,omitempty" mapstructure:"pullSecrets,omitempty"`

	// MongoDB(&reg;) image registry
	Registry string `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// MongoDB(&reg;) image registry
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
}

// Dictionary of initdb scripts
type ValuesInitdbScripts map[string]interface{}

// Annotations to be added to the MongoDB(&reg;) statefulset. Evaluated as a
// template
type ValuesLabels map[string]interface{}

// LifecycleHook for the MongoDB(&reg;) container(s) to automate configuration
// before or after startup
type ValuesLifecycleHooks map[string]interface{}

type ValuesLivenessProbe struct {
	// Enable livenessProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesMetrics struct {
	// Override default container args (useful when using custom images)
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Collector corresponds to the JSON schema field "collector".
	Collector *ValuesMetricsCollector `json:"collector,omitempty" yaml:"collector,omitempty" mapstructure:"collector,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Enables old style mongodb-exporter metrics
	CompatibleMode bool `json:"compatibleMode,omitempty" yaml:"compatibleMode,omitempty" mapstructure:"compatibleMode,omitempty"`

	// Port of the Prometheus metrics container
	ContainerPort float64 `json:"containerPort,omitempty" yaml:"containerPort,omitempty" mapstructure:"containerPort,omitempty"`

	// Override default liveness probe for MongoDB(&reg;) containers
	CustomLivenessProbe ValuesMetricsCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Override default readiness probe for MongoDB(&reg;) containers
	CustomReadinessProbe ValuesMetricsCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Override default startup probe for MongoDB(&reg;) containers
	CustomStartupProbe ValuesMetricsCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// Enable using a sidecar Prometheus exporter
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// String with extra flags to the metrics exporter
	ExtraFlags string `json:"extraFlags,omitempty" yaml:"extraFlags,omitempty" mapstructure:"extraFlags,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the metrics
	// container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesMetricsImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesMetricsLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// String with password for the metrics exporter
	Password string `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// PrometheusRule corresponds to the JSON schema field "prometheusRule".
	PrometheusRule *ValuesMetricsPrometheusRule `json:"prometheusRule,omitempty" yaml:"prometheusRule,omitempty" mapstructure:"prometheusRule,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesMetricsReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesMetricsResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// metrics.resources is set (metrics.resources is recommended for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesMetricsServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesMetricsStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// String with username for the metrics exporter
	Username string `json:"username,omitempty" yaml:"username,omitempty" mapstructure:"username,omitempty"`
}

type ValuesMetricsCollector struct {
	// Enable all collectors. Same as enabling all individual metrics
	All bool `json:"all,omitempty" yaml:"all,omitempty" mapstructure:"all,omitempty"`

	// Boolean Enable collecting metrics from $collStats
	Collstats bool `json:"collstats,omitempty" yaml:"collstats,omitempty" mapstructure:"collstats,omitempty"`

	// List of \<databases\>.\<collections\> to get $collStats
	CollstatsColls []interface{} `json:"collstatsColls,omitempty" yaml:"collstatsColls,omitempty" mapstructure:"collstatsColls,omitempty"`

	// Number - Disable collstats, dbstats, topmetrics and indexstats collector if
	// there are more than \<n\> collections. 0=No limit
	CollstatsLimit float64 `json:"collstatsLimit,omitempty" yaml:"collstatsLimit,omitempty" mapstructure:"collstatsLimit,omitempty"`

	// Boolean Enable collecting metrics from dbStats
	Dbstats bool `json:"dbstats,omitempty" yaml:"dbstats,omitempty" mapstructure:"dbstats,omitempty"`

	// Boolean Enable collecting metrics from getDiagnosticData
	Diagnosticdata bool `json:"diagnosticdata,omitempty" yaml:"diagnosticdata,omitempty" mapstructure:"diagnosticdata,omitempty"`

	// Boolean Enable collecting metrics from $indexStats
	Indexstats bool `json:"indexstats,omitempty" yaml:"indexstats,omitempty" mapstructure:"indexstats,omitempty"`

	// List - List of \<databases\>.\<collections\> to get $indexStats
	IndexstatsColls []interface{} `json:"indexstatsColls,omitempty" yaml:"indexstatsColls,omitempty" mapstructure:"indexstatsColls,omitempty"`

	// Boolean Enable collecting metrics from replSetGetStatus
	Replicasetstatus bool `json:"replicasetstatus,omitempty" yaml:"replicasetstatus,omitempty" mapstructure:"replicasetstatus,omitempty"`

	// Boolean Enable collecting metrics from top admin command
	Topmetrics bool `json:"topmetrics,omitempty" yaml:"topmetrics,omitempty" mapstructure:"topmetrics,omitempty"`
}

// Override default liveness probe for MongoDB(&reg;) containers
type ValuesMetricsCustomLivenessProbe map[string]interface{}

// Override default readiness probe for MongoDB(&reg;) containers
type ValuesMetricsCustomReadinessProbe map[string]interface{}

// Override default startup probe for MongoDB(&reg;) containers
type ValuesMetricsCustomStartupProbe map[string]interface{}

type ValuesMetricsImage struct {
	// MongoDB(&reg;) image digest in the way sha256:aa.... Please note this
	// parameter, if set, will override the tag
	Digest string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// MongoDB(&reg;) Prometheus exporter image pull policy
	PullPolicy string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Specify docker-registry secret names as an array
	PullSecrets []interface{} `json:"pullSecrets,omitempty" yaml:"pullSecrets,omitempty" mapstructure:"pullSecrets,omitempty"`

	// MongoDB(&reg;) Prometheus exporter image registry
	Registry string `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// MongoDB(&reg;) Prometheus exporter image repository
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
}

type ValuesMetricsLivenessProbe struct {
	// Enable livenessProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesMetricsPrometheusRule struct {
	// Additional labels that can be used so prometheusRules will be discovered by
	// Prometheus
	AdditionalLabels ValuesMetricsPrometheusRuleAdditionalLabels `json:"additionalLabels,omitempty" yaml:"additionalLabels,omitempty" mapstructure:"additionalLabels,omitempty"`

	// Set this to true to create prometheusRules for Prometheus operator
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Namespace where prometheusRules resource should be created
	Namespace string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Rules to be created, check values for an example
	Rules []interface{} `json:"rules,omitempty" yaml:"rules,omitempty" mapstructure:"rules,omitempty"`
}

// Additional labels that can be used so prometheusRules will be discovered by
// Prometheus
type ValuesMetricsPrometheusRuleAdditionalLabels map[string]interface{}

type ValuesMetricsReadinessProbe struct {
	// Enable readinessProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesMetricsResources map[string]interface{}

type ValuesMetricsService struct {
	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Ports corresponds to the JSON schema field "ports".
	Ports *ValuesMetricsServicePorts `json:"ports,omitempty" yaml:"ports,omitempty" mapstructure:"ports,omitempty"`

	// Type of the Prometheus metrics service
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesMetricsServiceMonitor struct {
	// Create ServiceMonitor Resource for scraping metrics using Prometheus Operator
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Specify honorLabels parameter to add the scrape endpoint
	HonorLabels bool `json:"honorLabels,omitempty" yaml:"honorLabels,omitempty" mapstructure:"honorLabels,omitempty"`

	// Interval at which metrics should be scraped
	Interval string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// The name of the label on the target service to use as the job name in
	// prometheus.
	JobLabel string `json:"jobLabel,omitempty" yaml:"jobLabel,omitempty" mapstructure:"jobLabel,omitempty"`

	// Used to pass Labels that are used by the Prometheus installed in your cluster
	// to select Service Monitors to work with
	Labels ValuesMetricsServiceMonitorLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// MetricsRelabelConfigs to apply to samples before ingestion.
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Namespace which Prometheus is running in
	Namespace string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// RelabelConfigs to apply to samples before scraping.
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// Specify the timeout after which the scrape is ended
	ScrapeTimeout string `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// Prometheus instance selector labels
	Selector ValuesMetricsServiceMonitorSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// Used to pass Labels that are used by the Prometheus installed in your cluster to
// select Service Monitors to work with
type ValuesMetricsServiceMonitorLabels map[string]interface{}

// Prometheus instance selector labels
type ValuesMetricsServiceMonitorSelector map[string]interface{}

type ValuesMetricsServicePorts struct {
	// Port of the Prometheus metrics service
	Metrics float64 `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`
}

type ValuesMetricsStartupProbe struct {
	// Enable startupProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesNetworkPolicy struct {
	// Don't require server label for connections
	AllowExternal bool `json:"allowExternal,omitempty" yaml:"allowExternal,omitempty" mapstructure:"allowExternal,omitempty"`

	// Allow the pod to access any range of port and all destinations.
	AllowExternalEgress bool `json:"allowExternalEgress,omitempty" yaml:"allowExternalEgress,omitempty" mapstructure:"allowExternalEgress,omitempty"`

	// Specifies whether a NetworkPolicy should be created
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra ingress rules to the NetworkPolicy
	ExtraEgress []string `json:"extraEgress,omitempty" yaml:"extraEgress,omitempty" mapstructure:"extraEgress,omitempty"`

	// Add extra ingress rules to the NetworkPolice
	ExtraIngress []string `json:"extraIngress,omitempty" yaml:"extraIngress,omitempty" mapstructure:"extraIngress,omitempty"`
}

type ValuesNodeAffinityPreset struct {
	// MongoDB(&reg;) Node label key to match Ignored if `affinity` is set.
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// MongoDB(&reg;) Node affinity preset type. Ignored if `affinity` is set. Allowed
	// values: `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// MongoDB(&reg;) Node label values to match. Ignored if `affinity` is set.
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// MongoDB(&reg;) Node labels for pod assignment
type ValuesNodeSelector map[string]interface{}

type ValuesPdb struct {
	// Enable/disable a Pod Disruption Budget creation for MongoDB(&reg;) pod(s)
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Maximum number/percentage of MongoDB(&reg;) pods that may be made unavailable
	// after the eviction
	MaxUnavailable string `json:"maxUnavailable,omitempty" yaml:"maxUnavailable,omitempty" mapstructure:"maxUnavailable,omitempty"`

	// Minimum number/percentage of MongoDB(&reg;) pods that must still be available
	// after the eviction
	MinAvailable float64 `json:"minAvailable,omitempty" yaml:"minAvailable,omitempty" mapstructure:"minAvailable,omitempty"`
}

type ValuesPersistence struct {
	// PV Access Mode
	AccessModes []string `json:"accessModes,omitempty" yaml:"accessModes,omitempty" mapstructure:"accessModes,omitempty"`

	// PVC annotations
	Annotations ValuesPersistenceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enable MongoDB(&reg;) data persistence using PVC
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Provide an existing `PersistentVolumeClaim` (only when
	// `architecture=standalone`)
	ExistingClaim string `json:"existingClaim,omitempty" yaml:"existingClaim,omitempty" mapstructure:"existingClaim,omitempty"`

	// Provide a medium for `emptyDir` volumes.
	Medium string `json:"medium,omitempty" yaml:"medium,omitempty" mapstructure:"medium,omitempty"`

	// Path to mount the volume at
	MountPath string `json:"mountPath,omitempty" yaml:"mountPath,omitempty" mapstructure:"mountPath,omitempty"`

	// Name of the PVC and mounted volume
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Setting it to "keep" to avoid removing PVCs during a helm delete operation.
	// Leaving it empty will delete PVCs after the chart deleted
	ResourcePolicy string `json:"resourcePolicy,omitempty" yaml:"resourcePolicy,omitempty" mapstructure:"resourcePolicy,omitempty"`

	// PVC Storage Request for MongoDB(&reg;) data volume
	Size string `json:"size,omitempty" yaml:"size,omitempty" mapstructure:"size,omitempty"`

	// PVC Storage Class for MongoDB(&reg;) data volume
	StorageClass string `json:"storageClass,omitempty" yaml:"storageClass,omitempty" mapstructure:"storageClass,omitempty"`

	// Subdirectory of the volume to mount at
	SubPath string `json:"subPath,omitempty" yaml:"subPath,omitempty" mapstructure:"subPath,omitempty"`

	// VolumeClaimTemplates corresponds to the JSON schema field
	// "volumeClaimTemplates".
	VolumeClaimTemplates *ValuesPersistenceVolumeClaimTemplates `json:"volumeClaimTemplates,omitempty" yaml:"volumeClaimTemplates,omitempty" mapstructure:"volumeClaimTemplates,omitempty"`
}

// PVC annotations
type ValuesPersistenceAnnotations map[string]interface{}

type ValuesPersistenceVolumeClaimTemplates struct {
	// Add dataSource to the VolumeClaimTemplate
	DataSource ValuesPersistenceVolumeClaimTemplatesDataSource `json:"dataSource,omitempty" yaml:"dataSource,omitempty" mapstructure:"dataSource,omitempty"`

	// Custom PVC requests attributes
	Requests ValuesPersistenceVolumeClaimTemplatesRequests `json:"requests,omitempty" yaml:"requests,omitempty" mapstructure:"requests,omitempty"`

	// A label query over volumes to consider for binding (e.g. when using local
	// volumes)
	Selector ValuesPersistenceVolumeClaimTemplatesSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// Add dataSource to the VolumeClaimTemplate
type ValuesPersistenceVolumeClaimTemplatesDataSource map[string]interface{}

// Custom PVC requests attributes
type ValuesPersistenceVolumeClaimTemplatesRequests map[string]interface{}

// A label query over volumes to consider for binding (e.g. when using local
// volumes)
type ValuesPersistenceVolumeClaimTemplatesSelector map[string]interface{}

type ValuesPersistentVolumeClaimRetentionPolicy struct {
	// Enable Persistent volume retention policy for MongoDB(&reg;) Statefulset
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Volume retention behavior that applies when the StatefulSet is deleted
	WhenDeleted string `json:"whenDeleted,omitempty" yaml:"whenDeleted,omitempty" mapstructure:"whenDeleted,omitempty"`

	// Volume retention behavior when the replica count of the StatefulSet is reduced
	WhenScaled string `json:"whenScaled,omitempty" yaml:"whenScaled,omitempty" mapstructure:"whenScaled,omitempty"`
}

// MongoDB(&reg;) Pod annotations
type ValuesPodAnnotations map[string]interface{}

// MongoDB(&reg;) pod labels
type ValuesPodLabels map[string]interface{}

type ValuesPodSecurityContext struct {
	// Enable MongoDB(&reg;) pod(s)' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Group ID for the volumes of the MongoDB(&reg;) pod(s)
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// sysctl settings of the MongoDB(&reg;) pod(s)'
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesPodSecurityPolicy struct {
	// Enable privilege escalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Whether to create a PodSecurityPolicy. WARNING: PodSecurityPolicy is deprecated
	// in Kubernetes v1.21 or later, unavailable in v1.25 or later
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Allow privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Specify the full spec to use for Pod Security Policy
	Spec ValuesPodSecurityPolicySpec `json:"spec,omitempty" yaml:"spec,omitempty" mapstructure:"spec,omitempty"`
}

// Specify the full spec to use for Pod Security Policy
type ValuesPodSecurityPolicySpec map[string]interface{}

type ValuesRbac struct {
	// Whether to create & use RBAC resources or not
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Custom rules to create following the role specification
	Rules []interface{} `json:"rules,omitempty" yaml:"rules,omitempty" mapstructure:"rules,omitempty"`
}

type ValuesReadinessProbe struct {
	// Enable readinessProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesReplicaSetConfigurationSettings struct {
	// run-time rs.conf settings
	Configuration ValuesReplicaSetConfigurationSettingsConfiguration `json:"configuration,omitempty" yaml:"configuration,omitempty" mapstructure:"configuration,omitempty"`

	// Enable MongoDB(&reg;) Switch to enable/disable configuring MongoDB(&reg;) run
	// time rs.conf settings
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

// run-time rs.conf settings
type ValuesReplicaSetConfigurationSettingsConfiguration map[string]interface{}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesResources map[string]interface{}

type ValuesService struct {
	// Wheter to allocate node ports when service type is LoadBalancer
	AllocateLoadBalancerNodePorts bool `json:"allocateLoadBalancerNodePorts,omitempty" yaml:"allocateLoadBalancerNodePorts,omitempty" mapstructure:"allocateLoadBalancerNodePorts,omitempty"`

	// Provide any additional annotations that may be required
	Annotations ValuesServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// MongoDB(&reg;) service cluster IP (only for standalone architecture)
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Specify the externalIP value ClusterIP service type (only for standalone
	// architecture)
	ExternalIPs []interface{} `json:"externalIPs,omitempty" yaml:"externalIPs,omitempty" mapstructure:"externalIPs,omitempty"`

	// service external traffic policy (only for standalone architecture)
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Headless corresponds to the JSON schema field "headless".
	Headless *ValuesServiceHeadless `json:"headless,omitempty" yaml:"headless,omitempty" mapstructure:"headless,omitempty"`

	// loadBalancerClass for MongoDB(&reg;) Service (only for standalone architecture)
	LoadBalancerClass string `json:"loadBalancerClass,omitempty" yaml:"loadBalancerClass,omitempty" mapstructure:"loadBalancerClass,omitempty"`

	// loadBalancerIP for MongoDB(&reg;) Service (only for standalone architecture)
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Address(es) that are allowed when service is LoadBalancer (only for standalone
	// architecture)
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// MongoDB(&reg;) service name
	NameOverride string `json:"nameOverride,omitempty" yaml:"nameOverride,omitempty" mapstructure:"nameOverride,omitempty"`

	// NodePorts corresponds to the JSON schema field "nodePorts".
	NodePorts *ValuesServiceNodePorts `json:"nodePorts,omitempty" yaml:"nodePorts,omitempty" mapstructure:"nodePorts,omitempty"`

	// MongoDB(&reg;) service port name (only for standalone architecture)
	PortName string `json:"portName,omitempty" yaml:"portName,omitempty" mapstructure:"portName,omitempty"`

	// Ports corresponds to the JSON schema field "ports".
	Ports *ValuesServicePorts `json:"ports,omitempty" yaml:"ports,omitempty" mapstructure:"ports,omitempty"`

	// Control where client requests go, to the same pod or round-robin
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Kubernetes Service type (only for standalone architecture)
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesServiceAccount struct {
	// Additional Service Account annotations
	Annotations ValuesServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Allows auto mount of ServiceAccountToken on the serviceAccount created
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Enable creation of ServiceAccount for MongoDB(&reg;) pods
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Name of the created serviceAccount
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Additional Service Account annotations
type ValuesServiceAccountAnnotations map[string]interface{}

// Provide any additional annotations that may be required
type ValuesServiceAnnotations map[string]interface{}

type ValuesServiceBindings struct {
	// Create secret for service binding (Experimental)
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesServiceHeadless struct {
	// Annotations for the headless service.
	Annotations ValuesServiceHeadlessAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`
}

// Annotations for the headless service.
type ValuesServiceHeadlessAnnotations map[string]interface{}

type ValuesServiceNodePorts struct {
	// Port to bind to for NodePort and LoadBalancer service types (only for
	// standalone architecture)
	Mongodb string `json:"mongodb,omitempty" yaml:"mongodb,omitempty" mapstructure:"mongodb,omitempty"`
}

type ValuesServicePorts struct {
	// MongoDB(&reg;) service port.
	Mongodb float64 `json:"mongodb,omitempty" yaml:"mongodb,omitempty" mapstructure:"mongodb,omitempty"`
}

// Additional settings for the sessionAffinity
type ValuesServiceSessionAffinityConfig map[string]interface{}

type ValuesStartupProbe struct {
	// Enable startupProbe
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesTls struct {
	// Arbiter corresponds to the JSON schema field "arbiter".
	Arbiter *ValuesTlsArbiter `json:"arbiter,omitempty" yaml:"arbiter,omitempty" mapstructure:"arbiter,omitempty"`

	// Generate a custom CA and self-signed certificates
	AutoGenerated bool `json:"autoGenerated,omitempty" yaml:"autoGenerated,omitempty" mapstructure:"autoGenerated,omitempty"`

	// Custom CA certificated (base64 encoded)
	CaCert string `json:"caCert,omitempty" yaml:"caCert,omitempty" mapstructure:"caCert,omitempty"`

	// CA certificate private key (base64 encoded)
	CaKey string `json:"caKey,omitempty" yaml:"caKey,omitempty" mapstructure:"caKey,omitempty"`

	// Enable MongoDB(&reg;) TLS support between nodes in the cluster as well as
	// between mongo clients and nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Existing secret with TLS certificates (keys: `mongodb-ca-cert`,
	// `mongodb-ca-key`)
	ExistingSecret string `json:"existingSecret,omitempty" yaml:"existingSecret,omitempty" mapstructure:"existingSecret,omitempty"`

	// Add extra dns names to the CA, can solve x509 auth issue for pod clients
	ExtraDnsNames []interface{} `json:"extraDnsNames,omitempty" yaml:"extraDnsNames,omitempty" mapstructure:"extraDnsNames,omitempty"`

	// Hidden corresponds to the JSON schema field "hidden".
	Hidden *ValuesTlsHidden `json:"hidden,omitempty" yaml:"hidden,omitempty" mapstructure:"hidden,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesTlsImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// MTLS corresponds to the JSON schema field "mTLS".
	MTLS *ValuesTlsMTLS `json:"mTLS,omitempty" yaml:"mTLS,omitempty" mapstructure:"mTLS,omitempty"`

	// Allows to set the tls mode which should be used when tls is enabled (options:
	// `allowTLS`, `preferTLS`, `requireTLS`)
	Mode string `json:"mode,omitempty" yaml:"mode,omitempty" mapstructure:"mode,omitempty"`

	// Flag to denote that the Certificate Authority (CA) certificates are bundled
	// with the endpoint cert.
	PemChainIncluded bool `json:"pemChainIncluded,omitempty" yaml:"pemChainIncluded,omitempty" mapstructure:"pemChainIncluded,omitempty"`

	// Replicaset corresponds to the JSON schema field "replicaset".
	Replicaset *ValuesTlsReplicaset `json:"replicaset,omitempty" yaml:"replicaset,omitempty" mapstructure:"replicaset,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesTlsResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if tls.resources
	// is set (tls.resources is recommended for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Init container generate-tls-cert Security context
	SecurityContext ValuesTlsSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// Standalone corresponds to the JSON schema field "standalone".
	Standalone *ValuesTlsStandalone `json:"standalone,omitempty" yaml:"standalone,omitempty" mapstructure:"standalone,omitempty"`
}

type ValuesTlsArbiter struct {
	// Existing secret with TLS certificates (`tls.key`, `tls.crt`, `ca.crt`) or
	// (`tls.key`, `tls.crt`) with tls.pemChainIncluded set as enabled.
	ExistingSecret string `json:"existingSecret,omitempty" yaml:"existingSecret,omitempty" mapstructure:"existingSecret,omitempty"`
}

type ValuesTlsHidden struct {
	// Array of existing secrets with TLS certificates (`tls.key`, `tls.crt`,
	// `ca.crt`) or (`tls.key`, `tls.crt`) with tls.pemChainIncluded set as enabled.
	ExistingSecrets []interface{} `json:"existingSecrets,omitempty" yaml:"existingSecrets,omitempty" mapstructure:"existingSecrets,omitempty"`
}

type ValuesTlsImage struct {
	// Init container TLS certs setup image digest in the way sha256:aa.... Please
	// note this parameter, if set, will override the tag
	Digest string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// Init container TLS certs setup image pull policy
	PullPolicy string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Init container TLS certs specify docker-registry secret names as an array
	PullSecrets []interface{} `json:"pullSecrets,omitempty" yaml:"pullSecrets,omitempty" mapstructure:"pullSecrets,omitempty"`

	// Init container TLS certs setup image registry
	Registry string `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// Init container TLS certs setup image repository
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
}

type ValuesTlsMTLS struct {
	// IF TLS support is enabled, require clients to provide certificates
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesTlsReplicaset struct {
	// Array of existing secrets with TLS certificates (`tls.key`, `tls.crt`,
	// `ca.crt`) or (`tls.key`, `tls.crt`) with tls.pemChainIncluded set as enabled.
	ExistingSecrets []interface{} `json:"existingSecrets,omitempty" yaml:"existingSecrets,omitempty" mapstructure:"existingSecrets,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesTlsResources map[string]interface{}

// Init container generate-tls-cert Security context
type ValuesTlsSecurityContext map[string]interface{}

type ValuesTlsStandalone struct {
	// Existing secret with TLS certificates (`tls.key`, `tls.crt`, `ca.crt`) or
	// (`tls.key`, `tls.crt`) with tls.pemChainIncluded set as enabled.
	ExistingSecret string `json:"existingSecret,omitempty" yaml:"existingSecret,omitempty" mapstructure:"existingSecret,omitempty"`
}

type ValuesUpdateStrategy struct {
	// Strategy to use to replace existing MongoDB(&reg;) pods. When
	// architecture=standalone and useStatefulSet=false,
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesVolumePermissions struct {
	// Enable init container that changes the owner and group of the persistent
	// volume(s) mountpoint to `runAsUser:fsGroup`
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesVolumePermissionsImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesVolumePermissionsResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// volumePermissions.resources is set (volumePermissions.resources is recommended
	// for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// SecurityContext corresponds to the JSON schema field "securityContext".
	SecurityContext *ValuesVolumePermissionsSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`
}

type ValuesVolumePermissionsImage struct {
	// Init container volume-permissions image digest in the way sha256:aa.... Please
	// note this parameter, if set, will override the tag
	Digest string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// Init container volume-permissions image pull policy
	PullPolicy string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Specify docker-registry secret names as an array
	PullSecrets []interface{} `json:"pullSecrets,omitempty" yaml:"pullSecrets,omitempty" mapstructure:"pullSecrets,omitempty"`

	// Init container volume-permissions image registry
	Registry string `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// Init container volume-permissions image repository
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesVolumePermissionsResources map[string]interface{}

type ValuesVolumePermissionsSecurityContext struct {
	// User ID for the volumePermissions container
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`
}
